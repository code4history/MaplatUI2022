import path from "node:path";
import fs from "node:fs/promises";
import postcss from "postcss";
import PostcssInlineSvg from "postcss-inline-svg";
import Scss from "postcss-scss"
import { dedent } from "ts-dedent";

const __dirname = path.dirname(new URL(import.meta.url).pathname);
const iconsPath = path.resolve(__dirname, path.join("..", "src", "icons"));
const svgFiles = (await fs.readdir(iconsPath)).filter(filename => filename.endsWith(".svg"));

const distPath = path.resolve(__dirname, path.join("..", "src", "icons.scss"));

const BANNER = `// Generated by bin/icons.mjs`;

const COMMON = dedent`
@mixin common() {
  content: "";
  background-size: contain;
  background-repeat: no-repeat;
  height: 100%;
  width: 100%;
  display: inline-block;
}
`

const genScss = async () => {
  const classes = svgFiles.map(filename => {
    const iconName = filename.slice(0, -1 * ".svg".length);
    const svgFilePath = path.resolve(__dirname, path.join("..", "src", "icons", filename));

    return dedent`
      .i-${iconName}:before {
        @include common;
        background-image: svg-load("${svgFilePath}");
      }`;
  });

  const scss = [BANNER, COMMON, classes].flat(Infinity).join("\n\n");
  return scss;
}

const loadSvg = async (scss) => {
  const result = await postcss([PostcssInlineSvg])
    .process(scss, { syntax: Scss });

  return result.css;
}

async function main() {
  try {
    let scss = await genScss();
    scss = await loadSvg(scss);
    await fs.writeFile(distPath, scss);

    console.log("Build done.");
  } catch (error) {
    console.log("Build failed.");
    console.error(error);
  }
}

main();
